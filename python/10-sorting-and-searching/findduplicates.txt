"You have an array with all the numbers from 1 to N, where N is at most 32,000.
The array may have duplicate entries and you do not know what N is. With only 4
kilobytes of memory available, how would you print all duplicate elements in
the array?"

I'll assume that the 4KB aren't for program execution - this is just what I have available on the heap.

Given what N is limited to, I know I can represent each of these with *short*s,
if I needed to.

So I'll need two bytes per number - so I can never hold more than 2000 of these in memory at any time.

I wonder if I can use the same approach as in the previous problem... I think I
can. In fact, the numbers fit quite snug - I'll use a bit-vector with 32k
positions, initialized to 0. Then, i'll read each number from the array
(oops, that might *technically* put me over 4kb... :) ) and check the value of
the bitvector at that position. If it's 1, hooray, it's a duplicate - print it.
If it's 0, flip it to 1.

This might be a bit obnoxious, since we'll be printing the number over and over
if there are multiple duplicates... but it solves the problem!
